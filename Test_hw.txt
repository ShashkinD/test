What is Lorem Ipsum?
Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
  
A Git repository is the .git/ folder inside a project. This repository tracks all changes made to files in your project, building a history over time. Meaning, if you delete the .git/ folder, then you delete your project’s history.
git init: This is the command you'll use to start a new repository. If you have a project directory that you'd like to turn into a Git 
repository, you navigate to that directory in your terminal and type 'git init'. 

git add: Once you've made changes in your working directory, the 'git add' command allows you to take those changes and stage them for a commit.

git commit: After staging your changes with 'git add', you use 'git commit' to save those changes to your local repository. Think of it as a checkpoint in your development process. 

git clone: If you want to get a copy of an existing Git repository — for example, a project you'd like to contribute to — the command you'll need is 'git clone'.

git commit -am "Message": This is a combination command that stages all changes to tracked files (those that Git has recorded in previous snapshots) and commits them in one step, with a message describing the commit.

git status: This command shows the state of the working directory and the staging area. It lets you see which changes have been staged, which haven’t, and which files aren’t being tracked by Git.

git checkout: This command is used to switch between different versions of a Git repo.

git pull: This command fetches changes from a remote repository and merges them into the current branch of your local repository.

git push: This command pushes commits from your local repository up to a remote repository.

git stash: Stash the changes in a dirty working directory away.
